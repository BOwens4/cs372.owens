// Cryptography Assg 01
// Braden Owens
// 9/4/2022


// The three pages of text I chose for this assignment is pages from my favorite book old yeller.
// I had 2 major issues with this program that I was not able to resolve.
// //1. The program would not accept the full three pages of text without throwing an error about truncating the length.
// //2. I was not able to get my program to fully encrypt and decrypt the message, only the first word and a letter. I did it all manually.
// Below is my code.
#include <string>
#include <iostream>
#include <bitset>
#include <algorithm>

std::bitset<32> to_bitset(std::string s)
{
    auto binary = [](char c) { return c == '0' || c == '1'; };
    auto not_binary = [binary](char c) { return !binary(c); };

    s.erase(std::remove_if(begin(s), end(s), not_binary), end(s));

    return std::bitset<32>(s);
}

std::string to_string(std::bitset<32> bs)
{
    return bs.to_string();
}

int main()
{
    // The first thing I would like to do is take the seed of my key
    // and create a pseduorandom number using a generator. I am using the middle square method.
    // I chose 75 as my beginning seed for the middle square method generator.
    // This resulted in the seeds of my key being 75,62,and 84.
    // I was not sure how many random numbers to generate, so I stopped at 3. 
   
    // This resulted in my key:
    // 1001011 (75) in binary
    // 111110 (62) in binary
    // 1010100 (84) in binary
    // putting these together in the order of 75,62,84
    // 
    // The KEY is: 10010111111101010100.
    // We must then combine this with XOR to create our Ciphertext.


    std::string str1= "10010111111101010100 "; //KEY
    std::string str
    auto result = to_string(to_bitset(str1) ^ to_bitset(str2));// above is the three sentence selected converted to binary
    std::cout << "below is the ciphertext" << std::endl;
    std::cout << result << std::endl;
    std::string str3 = "10010111111101010100 ";
    std::string str4 = "01010111011011000101111100110111";
    auto result2 = to_string(to_bitset(str3) ^ to_bitset(str4));
    std::cout << "below is the decrypted message which just needs to be converted to binary" << std::endl;
    std::cout << result2 << std::endl;
    // I cannot get my code to translate the entire message, what results is only the first word and letter of the paragraph, which is "We c"
    // However, when I do these calculations by an online calculator, I get the results you'd expect.
    // The paragraph I began with is:
    // We called him Old Yeller. The name had a sort of double meaning. One part meant that his short hair was a dingy yellow, a color that we called yeller in those days. The other meant that when he opened his head, the sound he let out came closer to being a yell than a bark. 
    // I then converted it to binary, XORd it with the key, xord the result with the key again, and you arrive back at the same paragraph
   // The RESULT OF THE XOR BETWEEN KEY AND BINARY TEXT (ciphertext
    // The ciphertext converted back, by XORing CIPHERTEXT and KEY(binary result of plain text
    // This binary result converted back to plaintext is the paragraph from earlier:
    // We called him Old Yeller.The name had a sort of double meaning. One part meant that his short hair was a dingy yellow, a color that we called yeller in those days.The other meant that when he opened his head, the sound he let out came closer to being a yell than a bark.

}

